        /// <summary>
        /// Get list items by {4}
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <returns>Return list of items by specifced {4}, active/inactive</returns>
        /// <response code={0}200{0}>Returns the item</response>
        /// <response code={0}500{0}>Error Occurred</response>  
        [HttpGet({0}GetListBy{4}{0})]
        [ProducesResponseType(typeof(List<{3}ViewModel>), 200)]
        [ProducesResponseType(500)]
        //[ValidateAntiForgeryToken]
        public IActionResult GetListBy{4}(Guid {4}, bool? isActive)
        <1>
            try
            <1>
                if (!isActive.HasValue)
                    return Ok(_repository.GetListBy{4}({4}));

                else if (isActive.Value)
                    return Ok(_repository.GetActiveListBy{4}({4}));

                else
                    return Ok(_repository.GetInctiveListBy{4}({4}));
            <2>
            catch (Exception ex)
            <1>
                _logger.LogCritical(${0}Exception while get list of items.{0}, ex);
                return StatusCode(500, ${0}Exception while get list of items. <1>ex.Message<2>{0});
            <2>
        <2>

        /// <summary>
        /// Delete existing items by {5} and then insert new items
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <param name={0}{5}{0}></param>
        /// <param name={0}{4}Ids{0}></param>
        /// <returns>Updated item</returns>
        /// <response code={0}204{0}>Items Inserted</response>
        /// <response code={0}400{0}>If the model is invalid</response> 
        /// <response code={0}500{0}>Error Occurred</response>  
        [HttpPost({0}Insert{4}List{0})]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        //[ValidateAntiForgeryToken]
        public IActionResult Insert{4}List(Guid {5}, [FromBody] List<Guid> {4}Ids)
        <1>
            if (ModelState.IsValid)
            <1>
                try
                <1>
                    _repository.Insert{4}List({5}, {4}Ids);

                    return NoContent();
                <2>
                catch (Exception ex)
                <1>
                    _logger.LogCritical(${0}Exception while inserting {4} list.{0}, ex);
                    return StatusCode(500, ${0}Exception while inserting {4} list. <1>ex.Message<2>{0});
                <2>
            <2>

            return BadRequest(ModelState);
        <2>

        /// <summary>
        /// Delete items by {4}
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <returns></returns>
        /// <response code={0}204{0}>Items have been deleted.</response>
        /// <response code={0}400{0}>If the model is invalid</response> 
        /// <response code={0}500{0}>Error Occurred</response>  
        [HttpDelete({0}DeleteBy{1}{0})]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        //[ValidateAntiForgeryToken]
        public IActionResult DeleteBy{4}(Guid {4})
        <1>
            if (ModelState.IsValid)
            <1>
                try
                <1>
                    _repository.DeleteBy{4}({4});

                    return NoContent();
                <2>
                catch (Exception ex)
                <1>
                    _logger.LogCritical(${0}Exception while deleting by {4} <1>{4}<2>.{0}, ex);
                    return StatusCode(500, ${0}Exception while deleting by {4} <1>{4}<2>. <1>ex.Message<2>{0});
                <2>
            <2>

            return BadRequest(ModelState);
        <2>
